package nl.rabobank.mongo.repository;import nl.rabobank.enums.AccountType;import nl.rabobank.mongo.factory.AccountDaoFactory;import nl.rabobank.mongo.mapper.AccountMapper;import nl.rabobank.mongo.model.SavingsAccountModel;import nl.rabobank.service.account.Account;import nl.rabobank.service.account.SavingsAccount;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class SavingAccountHelperRepository implements AccountDaoFactory {    private final Logger log = LoggerFactory.getLogger(SavingAccountHelperRepository.class);    private final SavingsAccountRepository savingsAccountRepository;    public SavingAccountHelperRepository(SavingsAccountRepository savingsAccountRepository) {        this.savingsAccountRepository = savingsAccountRepository;    }    @Override    public Account save(Account account) {        log.debug("Save account : {}", account);        SavingsAccountModel savingsAccountModel = AccountMapper.mapToModel((SavingsAccount) account);        savingsAccountRepository.save(savingsAccountModel);        return AccountMapper.mapFromModel(savingsAccountModel);    }    @Override    public Optional<Account> findByUserId(String userId, AccountType accountType) {        log.debug("Find account by user : {}", userId);        return savingsAccountRepository.findByUserId(userId, accountType)                .map(x -> SavingsAccount.builder()                        .accountNumber(x.getAccountNumber())                        .accountHolderName(x.getAccountHolderName())                        .balance(x.getBalance())                        .userId(userId)                        .type(accountType)                        .build());    }    @Override    public AccountType getType() {        log.debug("Get savings account type: {}");        return AccountType.SAVINGS;    }}