package nl.robobank.service;import nl.rabobank.dto.AccountDTO;import nl.rabobank.dto.PowerOfAttorneyDTO;import nl.rabobank.enums.AccountType;import nl.rabobank.enums.Authorization;import nl.rabobank.enums.RoleType;import nl.rabobank.mongo.model.UserModel;import nl.rabobank.mongo.repository.UserRepository;import nl.rabobank.service.account.AccountService;import nl.rabobank.service.authorizations.PowerOfAttorney;import nl.rabobank.service.authorizations.PowerOfAttorneyService;import nl.robobank.IntegrationTest;import nl.robobank.dummy.AccountDummy;import nl.robobank.dummy.PowerOfAttorneyDummy;import nl.robobank.dummy.UserDummy;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.crypto.password.PasswordEncoder;import static org.assertj.core.api.Assertions.assertThat;@IntegrationTestpublic class PowerOfAttorneyServiceIT {    private static final String USER_ONE_LOGIN = "test-user-one";    private static final String USER_ONE_PASSWORD = "password";    @Autowired    private AuthenticationManagerBuilder authenticationManagerBuilder;    @Autowired    private AccountService accountService;    @Autowired    private PowerOfAttorneyService powerOfAttorneyService;    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder;    @BeforeEach    public void init() throws Exception {        userRepository.deleteAll();        UserModel userOne = UserDummy.fetchOneUser(USER_ONE_LOGIN, passwordEncoder.encode(USER_ONE_PASSWORD));        userRepository.save(userOne);        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(                USER_ONE_LOGIN,                USER_ONE_PASSWORD        );        Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);        SecurityContextHolder.getContext().setAuthentication(authentication);        AccountDTO accountDTO = AccountDummy.fetchOneSavingsAccountDTO();        accountService.save(accountDTO);        AccountDTO accountDTO1 = AccountDummy.fetchOnePaymentAccountDTO();        accountService.save(accountDTO1);    }    @Test    @DisplayName("user is able to give write authorization for savings account")    void assertThatUserAbleGivePowerOfAttorneyToSavingsAccountWrite() {        PowerOfAttorneyDTO powerOfAttorneyDTO = PowerOfAttorneyDummy.fetchOneWritePowerOfDummyDTOForSavings();        PowerOfAttorneyDTO persistAccountDTO = powerOfAttorneyService.createPowerOfAttorney(powerOfAttorneyDTO);        assertThat(persistAccountDTO).isNotNull();        assertThat(persistAccountDTO.getAccountType()).isEqualTo(powerOfAttorneyDTO.getAccountType());        assertThat(persistAccountDTO.getAuthorization()).isEqualTo(powerOfAttorneyDTO.getAuthorization());    }    @Test    @DisplayName("user is able to give write authorization for payment account")    void assertThatUserAbleGivePowerOfAttorneyToPaymentAccountWrite() {        PowerOfAttorneyDTO powerOfAttorneyDTO = PowerOfAttorneyDummy.fetchOneWritePowerOfDummyDTOForPayment();        PowerOfAttorneyDTO persistAccountDTO = powerOfAttorneyService.createPowerOfAttorney(powerOfAttorneyDTO);        assertThat(persistAccountDTO).isNotNull();        assertThat(persistAccountDTO.getAccountType()).isEqualTo(powerOfAttorneyDTO.getAccountType());        assertThat(persistAccountDTO.getAuthorization()).isEqualTo(powerOfAttorneyDTO.getAuthorization());    }    @Test    @DisplayName("user is able to give read authorization for savings account")    void assertThatUserAbleGivePowerOfAttorneyToSavingsAccountRead() {        PowerOfAttorneyDTO powerOfAttorneyDTO = PowerOfAttorneyDummy.fetchOneReadPowerOfDummyDTOForSavings();        PowerOfAttorneyDTO persistAccountDTO = powerOfAttorneyService.createPowerOfAttorney(powerOfAttorneyDTO);        assertThat(persistAccountDTO).isNotNull();        assertThat(persistAccountDTO.getAccountType()).isEqualTo(powerOfAttorneyDTO.getAccountType());        assertThat(persistAccountDTO.getAuthorization()).isEqualTo(powerOfAttorneyDTO.getAuthorization());    }    @Test    @DisplayName("user is able to give read authorization for payment account")    void assertThatUserAbleGivePowerOfAttorneyToPaymentAccountRead() {        PowerOfAttorneyDTO powerOfAttorneyDTO = PowerOfAttorneyDummy.fetchOneReadPowerOfDummyDTOForPayment();        PowerOfAttorneyDTO persistAccountDTO = powerOfAttorneyService.createPowerOfAttorney(powerOfAttorneyDTO);        assertThat(persistAccountDTO).isNotNull();        assertThat(persistAccountDTO.getAccountType()).isEqualTo(powerOfAttorneyDTO.getAccountType());        assertThat(persistAccountDTO.getAuthorization()).isEqualTo(powerOfAttorneyDTO.getAuthorization());    }}