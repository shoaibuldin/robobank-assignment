package nl.robobank.security;import nl.rabobank.security.SecurityUtils;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import java.util.ArrayList;import java.util.Collection;import java.util.Optional;import static org.assertj.core.api.Assertions.assertThat;/** * Test class for the {@link SecurityUtils} utility class. */@DisplayName("Test for SecurityUtils")class SecurityUtilsUnitTest {    @BeforeEach    @AfterEach    void cleanup() {        SecurityContextHolder.clearContext();    }    @Test    @DisplayName("get current user login")    void testGetCurrentUserLogin() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("admin", "admin"));        SecurityContextHolder.setContext(securityContext);        Optional<String> login = SecurityUtils.getCurrentUserLogin();        assertThat(login).contains("admin");    }    @Test    @DisplayName("get current user jwt token")    void testGetCurrentUserJWT() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("admin", "token"));        SecurityContextHolder.setContext(securityContext);        Optional<String> jwt = SecurityUtils.getCurrentUserJWT();        assertThat(jwt).contains("token");    }    @Test    @DisplayName("test is user authenticated")    void testIsAuthenticated() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("admin", "admin"));        SecurityContextHolder.setContext(securityContext);        boolean isAuthenticated = SecurityUtils.isAuthenticated();        assertThat(isAuthenticated).isTrue();    }    @Test    @DisplayName("test anonymous is not authenticated")    void testAnonymousIsNotAuthenticated() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        Collection<GrantedAuthority> authorities = new ArrayList<>();        authorities.add(new SimpleGrantedAuthority("anonymous"));        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("anonymous", "anonymous", authorities));        SecurityContextHolder.setContext(securityContext);        boolean isAuthenticated = SecurityUtils.isAuthenticated();        assertThat(isAuthenticated).isFalse();    }    @Test    @DisplayName("test current user has the required authority")    void testHasCurrentUserThisAuthority() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        Collection<GrantedAuthority> authorities = new ArrayList<>();        authorities.add(new SimpleGrantedAuthority("user"));        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));        SecurityContextHolder.setContext(securityContext);        assertThat(SecurityUtils.hasCurrentUserThisAuthority("user")).isTrue();        assertThat(SecurityUtils.hasCurrentUserThisAuthority("admin")).isFalse();    }    @Test    @DisplayName("test current user has any of the authority")    void testHasCurrentUserAnyOfAuthorities() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        Collection<GrantedAuthority> authorities = new ArrayList<>();        authorities.add(new SimpleGrantedAuthority("user"));        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));        SecurityContextHolder.setContext(securityContext);        assertThat(SecurityUtils.hasCurrentUserAnyOfAuthorities("user", "admin")).isTrue();        assertThat(SecurityUtils.hasCurrentUserAnyOfAuthorities("anonymous", "admin")).isFalse();    }    @Test    @DisplayName("test current user has none of the authority")    void testHasCurrentUserNoneOfAuthorities() {        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();        Collection<GrantedAuthority> authorities = new ArrayList<>();        authorities.add(new SimpleGrantedAuthority("user"));        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));        SecurityContextHolder.setContext(securityContext);        assertThat(SecurityUtils.hasCurrentUserNoneOfAuthorities("user", "admin")).isFalse();        assertThat(SecurityUtils.hasCurrentUserNoneOfAuthorities("anonymous", "admin")).isTrue();    }}