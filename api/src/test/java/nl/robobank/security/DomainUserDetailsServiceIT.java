package nl.robobank.security;import nl.rabobank.mongo.model.UserModel;import nl.rabobank.mongo.repository.UserRepository;import nl.robobank.IntegrationTest;import nl.robobank.dummy.UserDummy;import org.apache.commons.lang3.RandomStringUtils;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import java.util.Locale;import static org.assertj.core.api.Assertions.assertThat;/** * Integrations tests for {@link nl.rabobank.security.DomainUserDetailsService}. */@IntegrationTest@DisplayName("Test for DomainUserDetailsService")class DomainUserDetailsServiceIT {    private static final String USER_ONE_LOGIN = "test-user-one";    private static final String USER_TWO_LOGIN = "test-user-two";    @Autowired    private UserRepository userRepository;    @Autowired    private UserDetailsService domainUserDetailsService;    @BeforeEach    public void init() {        userRepository.deleteAll();        UserModel userOne = UserDummy.fetchOneUser(USER_ONE_LOGIN, RandomStringUtils.random(60));        userRepository.save(userOne);        UserModel userTwo = UserDummy.fetchOneUser(USER_TWO_LOGIN, RandomStringUtils.random(60));        userRepository.save(userTwo);    }    @Test    @DisplayName("the user can be found via login")    void assertThatUserCanBeFoundByLogin() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);    }    @Test    @DisplayName("the user can be found via login ignoring the case")    void assertThatUserCanBeFoundByLoginIgnoreCase() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN.toUpperCase(Locale.ENGLISH));        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);    }}