package nl.robobank.rest;import nl.rabobank.dto.AccountDTO;import nl.rabobank.enums.AccountType;import nl.rabobank.mongo.model.UserModel;import nl.rabobank.mongo.repository.PaymentAccountRepository;import nl.rabobank.mongo.repository.SavingsAccountRepository;import nl.rabobank.mongo.repository.UserRepository;import nl.rabobank.service.account.AccountService;import nl.rabobank.service.account.SavingsAccount;import nl.robobank.IntegrationTest;import nl.robobank.TestUtil;import nl.robobank.dummy.AccountDummy;import nl.robobank.dummy.UserDummy;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.http.MediaType;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.test.context.support.WithUserDetails;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import java.util.List;import java.util.stream.Collectors;import static org.assertj.core.api.Assertions.assertThat;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;/** * Integration tests for the {@link nl.rabobank.rest.AccountController} REST controller. */@IntegrationTest@ExtendWith(MockitoExtension.class)@AutoConfigureMockMvc@WithUserDetails(value = "test-user-one")public class AccountControllerIT {    private static final String ENTITY_API_URL = "/api/accounts";    private static final String USER_ONE_LOGIN = "test-user-one";    private static final String USER_ONE_PASSWORD = "password";    @Autowired    AccountService accountService;    @Autowired    private MockMvc restAccountsMockMvc;    @Autowired    private UserRepository userRepository;    @Autowired    private PaymentAccountRepository paymentAccountRepository;    @Autowired    private SavingsAccountRepository savingsAccountRepository;    @Autowired    private PasswordEncoder passwordEncoder;    @Autowired    private AuthenticationManagerBuilder authenticationManagerBuilder;    @BeforeEach    public void initTest() throws Exception {        userRepository.deleteAll();        paymentAccountRepository.deleteAll();        savingsAccountRepository.deleteAll();        UserModel userOne = UserDummy.fetchOneUser(USER_ONE_LOGIN, passwordEncoder.encode(USER_ONE_PASSWORD));        userRepository.save(userOne);        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(                USER_ONE_LOGIN,                USER_ONE_PASSWORD        );        Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);        SecurityContextHolder.getContext().setAuthentication(authentication);        AccountDTO accountDTO1 = AccountDummy.fetchOnePaymentAccountDTO();        accountService.save(accountDTO1);        AccountDTO accountDTO = AccountDummy.fetchOneSavingsAccountDTO();        accountService.save(accountDTO);    }    @Test    @DisplayName("create savings account")    void saveSavingsAccount() throws Exception {        int databaseSizeBeforeCreate = savingsAccountRepository.findAll().size();        // Create the Accounts        AccountDTO accountDTO = AccountDummy.fetchOneSecondSavingsAccountDTO();        restAccountsMockMvc                .perform(MockMvcRequestBuilders.post(ENTITY_API_URL)                        .contentType(MediaType.APPLICATION_JSON)                        .content(TestUtil.convertObjectToJsonBytes(accountDTO)))                .andExpect(status().isCreated());        // Validate the Accounts in the database        List<AccountDTO> accountsList = savingsAccountRepository.findAll().stream().map(model -> SavingsAccount.builder()                        .accountNumber(model.getAccountNumber())                        .accountHolderName(model.getAccountHolderName())                        .balance(model.getBalance())                        .userId(model.getUserId())                        .type(AccountType.SAVINGS)                        .build()).collect(Collectors.toList()).stream().map(AccountDTO::new)                .collect(Collectors.toList());        assertThat(accountsList).hasSize(databaseSizeBeforeCreate + 1);        AccountDTO testAccounts = accountsList.get(accountsList.size() - 1);        assertThat(testAccounts).isEqualTo(accountDTO);    }    @Test    @DisplayName("create payment account")    void savePayingAccount() throws Exception {        int databaseSizeBeforeCreate = paymentAccountRepository.findAll().size();        // Create the Accounts        AccountDTO accountDTO = AccountDummy.fetchOneSecondPaymentAccountDTO();        restAccountsMockMvc                .perform(MockMvcRequestBuilders.post(ENTITY_API_URL)                        .contentType(MediaType.APPLICATION_JSON)                        .content(TestUtil.convertObjectToJsonBytes(accountDTO)))                .andExpect(status().isCreated());        // Validate the Accounts in the database        List<AccountDTO> accountsList = paymentAccountRepository.findAll().stream().map(model -> SavingsAccount.builder()                        .accountNumber(model.getAccountNumber())                        .accountHolderName(model.getAccountHolderName())                        .balance(model.getBalance())                        .userId(model.getUserId())                        .type(AccountType.PAYMENT)                        .build()).collect(Collectors.toList()).stream().map(AccountDTO::new)                .collect(Collectors.toList());        assertThat(accountsList).hasSize(databaseSizeBeforeCreate + 1);        AccountDTO testAccounts = accountsList.get(accountsList.size() - 1);        assertThat(testAccounts).isEqualTo(accountDTO);    }}