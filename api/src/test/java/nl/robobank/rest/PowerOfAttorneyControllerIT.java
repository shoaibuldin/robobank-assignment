package nl.robobank.rest;import nl.rabobank.dto.AccountDTO;import nl.rabobank.dto.PowerOfAttorneyDTO;import nl.rabobank.mongo.model.UserModel;import nl.rabobank.mongo.repository.PowerOfAttorneyRepository;import nl.rabobank.mongo.repository.UserRepository;import nl.rabobank.service.account.AccountService;import nl.rabobank.service.authorizations.PowerOfAttorney;import nl.rabobank.service.authorizations.PowerOfAttorneyService;import nl.robobank.IntegrationTest;import nl.robobank.TestUtil;import nl.robobank.dummy.AccountDummy;import nl.robobank.dummy.PowerOfAttorneyDummy;import nl.robobank.dummy.UserDummy;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.http.MediaType;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.test.context.support.WithUserDetails;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import java.util.List;import java.util.stream.Collectors;import static org.assertj.core.api.Assertions.assertThat;import static org.hamcrest.Matchers.hasItem;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;/** * Integration tests for the {@link nl.rabobank.rest.AccountController} REST controller. */@IntegrationTest@ExtendWith(MockitoExtension.class)@AutoConfigureMockMvc@WithUserDetails(value = "test-user-one")public class PowerOfAttorneyControllerIT {    @Autowired    private MockMvc restPowerOfAttorneyMockMvc;    private static final String ENTITY_API_URL = "/api/powerofattorney";    private static final String USER_ONE_LOGIN = "test-user-one";    private static final String USER_ONE_PASSWORD = "password";    @Autowired    AccountService accountService;    @Autowired    PowerOfAttorneyService powerOfAttorneyService;    @Autowired    private UserRepository userRepository;    @Autowired    private PowerOfAttorneyRepository powerOfAttorneyRepository;    @Autowired    private PasswordEncoder passwordEncoder;    @Autowired    private AuthenticationManagerBuilder authenticationManagerBuilder;    @BeforeEach    public void initTest() throws Exception {        userRepository.deleteAll();        powerOfAttorneyRepository.deleteAll();        UserModel userOne = UserDummy.fetchOneUser(USER_ONE_LOGIN, passwordEncoder.encode(USER_ONE_PASSWORD));        userRepository.save(userOne);        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(                USER_ONE_LOGIN,                USER_ONE_PASSWORD        );        Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);        SecurityContextHolder.getContext().setAuthentication(authentication);        AccountDTO accountDTOSavings = AccountDummy.fetchOneSavingsAccountDTO();        accountService.save(accountDTOSavings);        AccountDTO accountDTOPayment = AccountDummy.fetchOnePaymentAccountDTO();        accountService.save(accountDTOPayment);        PowerOfAttorneyDTO powerOfAttorneyDTOReadPayment = PowerOfAttorneyDummy.fetchOneReadPowerOfDummyDTOForPayment();        powerOfAttorneyService.createPowerOfAttorney(powerOfAttorneyDTOReadPayment);    }    @Test    @DisplayName("create power of attorney for read authorization")    void createPowerOfAttorneyForRead() throws Exception {        int databaseSizeBeforeCreate = powerOfAttorneyRepository.findAll().size();        // Create the power of attorney for read authorization        PowerOfAttorneyDTO powerOfAttorneyDTOReadSavings = PowerOfAttorneyDummy.fetchOneReadPowerOfDummyDTOForSavings();        restPowerOfAttorneyMockMvc                .perform(MockMvcRequestBuilders.post(ENTITY_API_URL)                        .contentType(MediaType.APPLICATION_JSON)                        .content(TestUtil.convertObjectToJsonBytes(powerOfAttorneyDTOReadSavings)))                .andExpect(status().isCreated());        // Validate the Accounts in the database        List<PowerOfAttorneyDTO> accountsList = powerOfAttorneyRepository.findAll().stream().map(model -> PowerOfAttorney.builder()                        .grantorName(model.getGrantorName())                        .authorization(model.getAuthorization())                        .account(model.getAccount())                        .build()).collect(Collectors.toList()).stream().map(PowerOfAttorneyDTO::new)                .collect(Collectors.toList());        assertThat(accountsList).hasSize(databaseSizeBeforeCreate + 1);        PowerOfAttorneyDTO testPowerOfAttorney = accountsList.get(accountsList.size() - 1);        assertThat(testPowerOfAttorney).isEqualTo(powerOfAttorneyDTOReadSavings);    }    @Test    @DisplayName("create power of attorney for write authorization")    void createPowerOfAttorneyForWrite() throws Exception {        int databaseSizeBeforeCreate = powerOfAttorneyRepository.findAll().size();        // Create the power of attorney for write authorization        PowerOfAttorneyDTO powerOfAttorneyDTOWritePayment = PowerOfAttorneyDummy.fetchOneWritePowerOfDummyDTOForPayment();        restPowerOfAttorneyMockMvc                .perform(MockMvcRequestBuilders.post(ENTITY_API_URL)                        .contentType(MediaType.APPLICATION_JSON)                        .content(TestUtil.convertObjectToJsonBytes(powerOfAttorneyDTOWritePayment)))                .andExpect(status().isCreated());        // Validate the Accounts in the database        List<PowerOfAttorneyDTO> accountsList = powerOfAttorneyRepository.findAll().stream().map(model -> PowerOfAttorney.builder()                        .grantorName(model.getGrantorName())                        .authorization(model.getAuthorization())                        .account(model.getAccount())                        .build()).collect(Collectors.toList()).stream().map(PowerOfAttorneyDTO::new)                .collect(Collectors.toList());        assertThat(accountsList).hasSize(databaseSizeBeforeCreate + 1);        PowerOfAttorneyDTO testPowerOfAttorney = accountsList.get(accountsList.size() - 1);        assertThat(testPowerOfAttorney).isEqualTo(powerOfAttorneyDTOWritePayment);    }    @Test    @DisplayName("get power of attorney for logged in user")    void testGetPowerOfAttorneyForUser() throws Exception {        PowerOfAttorneyDTO powerOfAttorneyDTOReadPayment = PowerOfAttorneyDummy.fetchOneReadPowerOfDummyDTOForPayment();        restPowerOfAttorneyMockMvc                .perform(get(ENTITY_API_URL))                .andExpect(status().isOk())                .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))                .andExpect(jsonPath("$.[*].grantorName").value(hasItem(powerOfAttorneyDTOReadPayment.getGrantorName())))                .andExpect(jsonPath("$.[*].authorization").value(hasItem(powerOfAttorneyDTOReadPayment.getAuthorization().toString())))                .andExpect(jsonPath("$.[*].accountType").value(hasItem(powerOfAttorneyDTOReadPayment.getAccountType().toString())));    }}