package nl.rabobank.security;import nl.rabobank.exception.UserNotEnabledException;import nl.rabobank.mongo.model.UserModel;import nl.rabobank.mongo.repository.UserRepository;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;import java.util.Collections;import java.util.List;/** * Authenticate a user from the database. */@Component("userDetailsService")public class DomainUserDetailsService implements UserDetailsService {    private final Logger log = LoggerFactory.getLogger(DomainUserDetailsService.class);    private final UserRepository userRepository;    public DomainUserDetailsService(UserRepository userRepository) {        this.userRepository = userRepository;    }    @Override    public UserDetails loadUserByUsername(final String login) {        log.debug("Authenticating {}", login);        return userRepository                .findByUsernameIgnoreCase(login)                .map(user -> createSpringSecurityUser(login, user))                .orElseThrow(() -> new UsernameNotFoundException("UserModel with email " + login + " was not found in the database"));    }    private org.springframework.security.core.userdetails.User createSpringSecurityUser(String lowercaseLogin, UserModel userModel) {        if (!userModel.getEnabled()) {            throw new UserNotEnabledException("User " + lowercaseLogin + " was not enabled");        }        List<GrantedAuthority> grantedAuthorities = Collections.singletonList(new SimpleGrantedAuthority(userModel.getRoleType().name()));        return new org.springframework.security.core.userdetails.User(userModel.getUsername(), userModel.getPassword(), grantedAuthorities);    }}