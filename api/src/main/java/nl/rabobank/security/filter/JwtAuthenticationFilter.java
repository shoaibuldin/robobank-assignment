package nl.rabobank.security.filter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.util.StringUtils;import org.springframework.web.filter.GenericFilterBean;import javax.servlet.FilterChain;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;/** * Filters incoming requests and installs a Spring Security principal if a header corresponding to a valid user is * found. */public class JwtAuthenticationFilter extends GenericFilterBean {    public static final String AUTHORIZATION_HEADER = "Authorization";    private static final Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter.class);    private final JwtTokenProvider tokenProvider;    public JwtAuthenticationFilter(JwtTokenProvider tokenProvider) {        this.tokenProvider = tokenProvider;    }    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) {        try {            HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;            String jwt = resolveToken(httpServletRequest);            if (StringUtils.hasText(jwt) && this.tokenProvider.validateToken(jwt)) {                Authentication authentication = this.tokenProvider.getAuthentication(jwt);                SecurityContextHolder.getContext().setAuthentication(authentication);            }            filterChain.doFilter(servletRequest, servletResponse);        } catch (Exception ex) {            logger.error("Could not set user authentication in security context", ex);        }    }    private String resolveToken(HttpServletRequest request) {        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {            return bearerToken.substring(7);        }        return null;    }}