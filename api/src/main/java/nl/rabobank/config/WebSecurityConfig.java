package nl.rabobank.config;import nl.rabobank.security.filter.JWTConfigurer;import nl.rabobank.security.filter.JwtTokenProvider;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)public class WebSecurityConfig extends WebSecurityConfigurerAdapter {    private final JwtTokenProvider tokenProvider;    public WebSecurityConfig(JwtTokenProvider tokenProvider) {        this.tokenProvider = tokenProvider;    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.csrf().disable().authorizeRequests()                .and()                .authorizeRequests()                .antMatchers("/api/authenticate").permitAll()                .antMatchers("/api/**").authenticated()                .and()                .cors()                .and()                .apply(securityConfigurerAdapter());    }    private JWTConfigurer securityConfigurerAdapter() {        return new JWTConfigurer(tokenProvider);    }}