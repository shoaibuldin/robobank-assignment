package nl.rabobank.rest;import com.fasterxml.jackson.annotation.JsonProperty;import nl.rabobank.rest.payload.LoginRequest;import nl.rabobank.security.filter.JwtAuthenticationFilter;import nl.rabobank.security.filter.JwtTokenProvider;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.validation.Valid;/** * Controller to authenticate users. */@RestController@RequestMapping("/api")public class AuthController {    private final Logger log = LoggerFactory.getLogger(AuthController.class);    private final JwtTokenProvider tokenProvider;    private final AuthenticationManagerBuilder authenticationManagerBuilder;    public AuthController(JwtTokenProvider tokenProvider, AuthenticationManagerBuilder authenticationManagerBuilder) {        this.tokenProvider = tokenProvider;        this.authenticationManagerBuilder = authenticationManagerBuilder;    }    /**     * {@code POST  /authenticate} : Login request.     *     * @param request the login request payload.     * @return the {@link LoginRequest} with status {@code 200 (OK)} and login success, or with status {@code 403 (Forbidden)} if invalid credentials.     */    @PostMapping("/authenticate")    public ResponseEntity<JWTTokenResponse> authentication(@Valid @RequestBody LoginRequest request) {        log.debug("REST request to login with username : {}", request.getUsername());        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(                request.getUsername(),                request.getPassword()        );        Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);        SecurityContextHolder.getContext().setAuthentication(authentication);        String jwt = tokenProvider.createToken(authentication);        HttpHeaders httpHeaders = new HttpHeaders();        httpHeaders.add(JwtAuthenticationFilter.AUTHORIZATION_HEADER, "Bearer " + jwt);        return new ResponseEntity<>(new JWTTokenResponse(jwt), httpHeaders, HttpStatus.OK);    }    /**     * Object to return as body in JWT Authentication.     */    static class JWTTokenResponse {        private String idToken;        JWTTokenResponse(String idToken) {            this.idToken = idToken;        }        @JsonProperty("id_token")        String getIdToken() {            return idToken;        }        void setIdToken(String idToken) {            this.idToken = idToken;        }    }}