package nl.rabobank.service.account;import nl.rabobank.dao.AccountDAO;import nl.rabobank.dao.UserDAO;import nl.rabobank.dto.AccountDTO;import nl.rabobank.enums.AccountType;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;@Servicepublic class AccountServiceImpl implements AccountService {    private final Logger log = LoggerFactory.getLogger(AccountServiceImpl.class);    private final AccountDAO accountDAO;    private final UserDAO userDAO;    public AccountServiceImpl(AccountDAO accountDAO, UserDAO userDAO) {        this.accountDAO = accountDAO;        this.userDAO = userDAO;    }    @Override    public AccountDTO save(AccountDTO accountsDTO) throws Exception {        log.debug("save account : {}", accountsDTO);        String username = SecurityContextHolder.getContext().getAuthentication().getName();        String userId = userDAO.findByUsername(username).getId();        String accountHolderNumber = accountsDTO.getAccountNumber();        String accountHolderName = accountsDTO.getAccountHolderName();        Double accountBalance = accountsDTO.getBalance();        Account account;        switch (accountsDTO.getType()) {            case PAYMENT:                account = new PaymentAccount(accountHolderNumber, accountHolderName, accountBalance, userId, AccountType.PAYMENT);                break;            case SAVINGS:                account = new SavingsAccount(accountHolderNumber, accountHolderName, accountBalance, userId, AccountType.SAVINGS);                break;            default:                throw new Exception("");        }        account = accountDAO.save(account);        return new AccountDTO(account);    }}